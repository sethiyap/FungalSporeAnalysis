}
print(bw_files)
## generate normalised matrix in tidy way
xx <- bw_files %>%
dplyr::mutate(bw = purrr::map(x, function(ii) {
get(as.character(ii))
})) %>%
dplyr::mutate(norm_matrix = purrr::map(bw, function(ii) {
nn <- EnrichedHeatmap::normalizeToMatrix(ii, tss, value_column = "score",background = 0,
extend = c(1000),w = 50,
smooth = TRUE)
nn[nn<0]=0
return(nn)
}))
if(log2==TRUE){
mat1 <- rlang::expr(log2(x[[1]]+1))
mat2 <- rlang::expr(log2(x[[i]]+1))
}
else{
mat1 <-  rlang::expr(x[[1]])
mat2 <-  rlang::expr(x[[i]])
}
# for color palette
if(palette=="white_green"){
colors <- c("#f7fcfd","#e5f5f9","#ccece6","#99d8c9", "#41ae76","#00441b", "#004529")
}
if(palette=="white_red"){
colors <-  c("#f7fcfd","#fff7f3","#fff7ec","#fee0d2","#ef6548","#d7301f","#b30000", "#7f0000")
}
if(palette=="white_blue"){
colors = c("#eff3ff","#c6dbef","#9ecae1","#6baed6","#2171b5","#08306b","#253494", "#081d58")
}
if(palette=="cream_pink"){
colors <-  c("#feebe2","#fcc5c0","#fa9fb5","#f768a1", "#c51b8a","#7a0177", "#49006a")
}
if(palette=="cream_green"){
colors <- c("#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d", "#238443","#006837", "#006837")
}
if(palette=="cream_brown"){
colors <-  c("#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026")
}
split_factor <- round((max_key/6),1)
breaks = seq(min_key,max_key, by = split_factor)
if(top_line==TRUE){
top_annotation = ComplexHeatmap::HeatmapAnnotation(
lines = EnrichedHeatmap::anno_enriched(gp = grid::gpar(fontsize=12),
ylim=c(ymin, ymax),
yaxis_side = "left",
yaxis_facing = "outside",
yaxis_gp = grid::gpar(fontsize = 10, lwd=1.5)))
}
else{
top_annotation = NULL
}
get_enrichment_heatmap_list <- function(x, names, titles, ...) {
ll <- length(x)
## first heatmap
ehml <- EnrichedHeatmap::EnrichedHeatmap(mat = eval(mat1), name = names[[1]], column_title = titles[[1]], show_heatmap_legend = T,
row_order= eval(row_order),
use_raster = TRUE, ...)
## several other heatmaps if length of x > 1.
if (ll > 1) {
for (i in 2:ll) {
print(i)
ehml <- ehml +
EnrichedHeatmap::EnrichedHeatmap(
mat = eval(mat2),
row_order= eval(row_order),
name = ifelse(length(names) >= i, names[i], "NA"),
use_raster = TRUE,
column_title = ifelse(length(titles) >= i, titles[i], "NA"),
show_heatmap_legend = ifelse(length(names) >= i, TRUE, FALSE), ...
) ## legend will be shown only if the name is given for a heatmap.
}
}
return(ehml)
}
ehm_list <- get_enrichment_heatmap_list(x = xx$norm_matrix,names = xx$names,titles = xx$names,
cluster_rows = FALSE,
pos_line = TRUE,
show_row_names = FALSE,
axis_name_rot = 90,
heatmap_legend_param = list(color_bar = "continuous",legend_direction="horizontal"),
axis_name = axis_name,
col = circlize::colorRamp2(breaks = breaks,
colors = as.vector(colors[1:length(breaks)])),
top_annotation = top_annotation
)
if(output==TRUE){
print("plotting")
png(file=paste(output_name, length(sub_feature_gr),"hm.png", sep="_"),width=nrow(bw_files)*1.5,height=5.5,pointsize = 8, res=300,units = "in")
ComplexHeatmap::draw(ehm_list, heatmap_legend_side = "top", gap = grid::unit(1.5, "mm"))
dev.off()
}
else{
return(ComplexHeatmap::draw(ehm_list, heatmap_legend_side = "right", gap = grid::unit(1.5, "mm")))
}
}
genelist_specific_profileplot(feature_txDb=feature_txDb,bw_files = bw_files, genelist=gene_list, output_name="An_Pol2_TBP_TFIIB", ymin=3, palette="white_red", min_key=0)
?EnrichedHeatmap
devtools::load_all()
devtools::load_all()
?profiles_normalized_by_control()
feature_txDb <- AnnotationDbi::loadDb(system.file("extdata/sqllite/an_feature_file_s10_m04_r07.sqlite" , package = "FungalSporeAnalysis"))
data_files <- system.file("extdata/sysdata.rda" , package = "FungalSporeAnalysis")
load(data_files)
genelist_1 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2.txt" , package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
genelist_2 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2_controlgenes.txt", package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'  load(data_files)
#'
#'  # Load gene_lists for specific genes
#'  genelist_1 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2.txt" , package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'  genelist_2 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2_controlgenes.txt", package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'
#'  #################################
#'  profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'
#' }
profiles_normalized_by_control <- function(feature_txDb,bw_test,bw_control,genelist_1=NULL,genelist_2=NULL,ymax=6,ymin=1, output_name="Sample", top_line=TRUE){
feature_gr <- GenomicFeatures::genes(feature_txDb)
#--- provide the genelist data with expression value for the list one
if(is.null(genelist_1)==FALSE){
genelist_1 <- genelist_1 %>% dplyr::arrange(desc(X2))
# order by genelist
sub_feature_gr_1 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_1$X1)
sub_feature_gr_1 <- sub_feature_gr_1[match(genelist_1$X1,sub_feature_gr_1$gene_id),]
cluster_rows <- FALSE
if(is.null(genelist_2)==FALSE){#--- get second list co-ordinates
sub_feature_gr_2 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_2$X1)
sub_feature_gr <- list(sub_feature_gr_1, sub_feature_gr_2)
}
else{
sub_feature_gr <- list(sub_feature_gr_1)
}
}
else{
if(is.null(genelist_2)==TRUE){
sub_feature_gr <- list(feature_gr)
cluster_rows <- TRUE
}
else{
print("gene_list_1 is NULL, so gene_list_2 should also be NULL!!")
exit()
}
}
if(stringr::str_detect(string = bw_test,paste(c("_", "-"),collapse = '|'))==TRUE){
names(sub_feature_gr) <- paste(gsub(pattern = "-.*|_.*", replacement="",x=bw_test),"_list",seq(1:length(sub_feature_gr)), sep="" )
}
else{
names(sub_feature_gr) <- paste(bw_test,"_list",seq(1:length(sub_feature_gr)), sep="")
}
gene_lists <- tidyr::tibble(name=names(sub_feature_gr), data=sub_feature_gr)
print(gene_lists)
#--- Load bw objects
bw_file_test <- get(bw_test)
bw_file_control <- get(bw_control)
#--- generate normalised matrix in tidy way
dd <-  gene_lists %>%
dplyr::mutate(mat_test=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_test, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
})) %>%
dplyr::mutate(mat_control=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_control, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
}))
#--- normalise by h3
message("Normalizing to control...")
dd2 <- dd  %>% dplyr::mutate(norm_mat = purrr::map2(mat_test,mat_control, function(x,y){
mm = (x+0.01) / (y+0.01)
return(mm)
} ))
print(dd2)
if(top_line==TRUE){
top_annotation = ComplexHeatmap::HeatmapAnnotation(
lines = EnrichedHeatmap::anno_enriched(gp = grid::gpar(fontsize=12),
ylim=c(ymin, ymax),
yaxis_side = "left",
yaxis_facing = "inside",
yaxis_gp = grid::gpar(fontsize = 10, lwd=1.5)))
}
else{
top_annotation = NULL
}
get_enrichment_heatmap_list <- function(x, names, titles, ...) {
ll <- length(x)
## first heatmap
ehml <- EnrichedHeatmap::EnrichedHeatmap(mat = x[[1]], name = names[[1]], column_title = titles[[1]], show_heatmap_legend = T,
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
use_raster = TRUE, ...)
## several other heatmaps if length of x > 1.
if (ll > 1) {
for (i in 2:ll) {
print(i)
ehml <- ehml +
EnrichedHeatmap::EnrichedHeatmap(
mat = x[[i]],
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
name = ifelse(length(names) >= i, names[i], "NA"),
use_raster = TRUE,
column_title = ifelse(length(titles) >= i, titles[i], "NA"),
show_heatmap_legend = ifelse(length(names) >= i, TRUE, FALSE), ...
) ## legend will be shown only if the name is given for a heatmap.
}
}
return(ehml)
}
ehm_list <- get_enrichment_heatmap_list(x = dd2$norm_mat,names = dd2$name,
titles = dd2$name,
cluster_rows = cluster_rows,
row_order=NULL,
show_row_names = FALSE,
axis_name_rot = 90,
heatmap_legend_param = list(color_bar = "continuous",legend_direction="horizontal", legend_width = grid::unit(3, "cm"),
title_position = "topcenter",labels_gp = grid::gpar(fontsize=10)),
axis_name = c("-1kb","TSS","TES", "+1kb"),
axis_name_gp = grid::gpar(fontsize=12),
top_annotation = top_annotation
)
# row_order_list = row_order(ehm_list)
# list_1$H3K4me3 <- list_1[row_order_list,]$X1
message("plotting...")
png(file=paste(output_name, lengths(gene_lists[1]),"normalized_hm.png", sep="_"),width=nrow(gene_lists)*2,height=5,pointsize = 10, res=300,units = "in")
ComplexHeatmap::draw(ehm_list, heatmap_legend_side = "top", gap = grid::unit(1.5, "mm"))
dev.off()
}
profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'  load(data_files)
#'
#'  # Load gene_lists for specific genes
#'  genelist_1 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2.txt" , package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'  genelist_2 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2_controlgenes.txt", package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'
#'  #################################
#'  profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'
#' }
profiles_normalized_by_control <- function(feature_txDb,bw_test,bw_control,genelist_1=NULL,genelist_2=NULL,ymax=6,ymin=1, output_name="Sample", top_line=TRUE){
feature_gr <- GenomicFeatures::genes(feature_txDb)
#--- provide the genelist data with expression value for the list one
if(is.null(genelist_1)==FALSE){
genelist_1 <- genelist_1 %>% dplyr::arrange(desc(X2))
# order by genelist
sub_feature_gr_1 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_1$X1)
sub_feature_gr_1 <- sub_feature_gr_1[match(genelist_1$X1,sub_feature_gr_1$gene_id),]
cluster_rows <- FALSE
if(is.null(genelist_2)==FALSE){#--- get second list co-ordinates
sub_feature_gr_2 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_2$X1)
sub_feature_gr <- list(sub_feature_gr_1, sub_feature_gr_2)
}
else{
sub_feature_gr <- list(sub_feature_gr_1)
}
}
else{
if(is.null(genelist_2)==TRUE){
sub_feature_gr <- list(feature_gr)
cluster_rows <- TRUE
}
else{
print("gene_list_1 is NULL, so gene_list_2 should also be NULL!!")
exit()
}
}
if(stringr::str_detect(string = bw_test,paste(c("_", "-"),collapse = '|'))==TRUE){
names(sub_feature_gr) <- paste(gsub(pattern = "-.*|_.*", replacement="",x=bw_test),"_list",seq(1:length(sub_feature_gr)), sep="" )
}
else{
names(sub_feature_gr) <- paste(bw_test,"_list",seq(1:length(sub_feature_gr)), sep="")
}
gene_lists <- tidyr::tibble(name=names(sub_feature_gr), data=sub_feature_gr)
print(gene_lists)
#--- Load bw objects
bw_file_test <- get(bw_test)
bw_file_control <- get(bw_control)
#--- generate normalised matrix in tidy way
dd <-  gene_lists %>%
dplyr::mutate(mat_test=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_test, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
})) %>%
dplyr::mutate(mat_control=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_control, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
}))
#--- normalise by h3
message("Normalizing to control...")
dd2 <- dd  %>% dplyr::mutate(norm_mat = purrr::map2(mat_test,mat_control, function(x,y){
mm = (x+0.01) / (y+0.01)
return(mm)
} ))
print(dd2)
if(top_line==TRUE){
top_annotation = ComplexHeatmap::HeatmapAnnotation(
lines = EnrichedHeatmap::anno_enriched(gp = grid::gpar(fontsize=12),
ylim=c(ymin, ymax),
yaxis_side = "left",
yaxis_gp = grid::gpar(fontsize = 10, lwd=1.5)))
}
else{
top_annotation = NULL
}
get_enrichment_heatmap_list <- function(x, names, titles, ...) {
ll <- length(x)
## first heatmap
ehml <- EnrichedHeatmap::EnrichedHeatmap(mat = x[[1]], name = names[[1]], column_title = titles[[1]], show_heatmap_legend = T,
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
use_raster = TRUE, ...)
## several other heatmaps if length of x > 1.
if (ll > 1) {
for (i in 2:ll) {
print(i)
ehml <- ehml +
EnrichedHeatmap::EnrichedHeatmap(
mat = x[[i]],
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
name = ifelse(length(names) >= i, names[i], "NA"),
use_raster = TRUE,
column_title = ifelse(length(titles) >= i, titles[i], "NA"),
show_heatmap_legend = ifelse(length(names) >= i, TRUE, FALSE), ...
) ## legend will be shown only if the name is given for a heatmap.
}
}
return(ehml)
}
ehm_list <- get_enrichment_heatmap_list(x = dd2$norm_mat,names = dd2$name,
titles = dd2$name,
cluster_rows = cluster_rows,
row_order=NULL,
show_row_names = FALSE,
axis_name_rot = 90,
heatmap_legend_param = list(color_bar = "continuous",legend_direction="horizontal", legend_width = grid::unit(3, "cm"),
title_position = "topcenter",labels_gp = grid::gpar(fontsize=10)),
axis_name = c("-1kb","TSS","TES", "+1kb"),
axis_name_gp = grid::gpar(fontsize=12),
top_annotation = top_annotation
)
# row_order_list = row_order(ehm_list)
# list_1$H3K4me3 <- list_1[row_order_list,]$X1
message("plotting...")
png(file=paste(output_name, lengths(gene_lists[1]),"normalized_hm.png", sep="_"),width=nrow(gene_lists)*2,height=5,pointsize = 10, res=300,units = "in")
ComplexHeatmap::draw(ehm_list, heatmap_legend_side = "top", gap = grid::unit(1.5, "mm"))
dev.off()
}
profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'  load(data_files)
#'
#'  # Load gene_lists for specific genes
#'  genelist_1 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2.txt" , package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'  genelist_2 <- readr::read_delim(system.file("extdata/genesets/an_spore_pol2_controlgenes.txt", package = "FungalSporeAnalysis"), delim="\t", col_names = FALSE)
#'
#'  #################################
#'  profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
#'
#' }
profiles_normalized_by_control <- function(feature_txDb,bw_test,bw_control,genelist_1=NULL,genelist_2=NULL,ymax=6,ymin=1, output_name="Sample", top_line=TRUE){
feature_gr <- GenomicFeatures::genes(feature_txDb)
#--- provide the genelist data with expression value for the list one
if(is.null(genelist_1)==FALSE){
genelist_1 <- genelist_1 %>% dplyr::arrange(desc(X2))
# order by genelist
sub_feature_gr_1 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_1$X1)
sub_feature_gr_1 <- sub_feature_gr_1[match(genelist_1$X1,sub_feature_gr_1$gene_id),]
cluster_rows <- FALSE
if(is.null(genelist_2)==FALSE){#--- get second list co-ordinates
sub_feature_gr_2 <-  subset(feature_gr, feature_gr$gene_id %in% genelist_2$X1)
sub_feature_gr <- list(sub_feature_gr_1, sub_feature_gr_2)
}
else{
sub_feature_gr <- list(sub_feature_gr_1)
}
}
else{
if(is.null(genelist_2)==TRUE){
sub_feature_gr <- list(feature_gr)
cluster_rows <- TRUE
}
else{
print("gene_list_1 is NULL, so gene_list_2 should also be NULL!!")
exit()
}
}
if(stringr::str_detect(string = bw_test,paste(c("_", "-"),collapse = '|'))==TRUE){
names(sub_feature_gr) <- paste(gsub(pattern = "-.*|_.*", replacement="",x=bw_test),"_list",seq(1:length(sub_feature_gr)), sep="" )
}
else{
names(sub_feature_gr) <- paste(bw_test,"_list",seq(1:length(sub_feature_gr)), sep="")
}
gene_lists <- tidyr::tibble(name=names(sub_feature_gr), data=sub_feature_gr)
print(gene_lists)
#--- Load bw objects
bw_file_test <- get(bw_test)
bw_file_control <- get(bw_control)
#--- generate normalised matrix in tidy way
dd <-  gene_lists %>%
dplyr::mutate(mat_test=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_test, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
})) %>%
dplyr::mutate(mat_control=purrr::map(data, function(i){
nn <- EnrichedHeatmap::normalizeToMatrix(bw_file_control, i, value_column = "score",background = 0,
smooth = TRUE,extend = c(1000))
nn[nn<0]=0
return(nn)
}))
#--- normalise by h3
message("Normalizing to control...")
dd2 <- dd  %>% dplyr::mutate(norm_mat = purrr::map2(mat_test,mat_control, function(x,y){
mm = (x+0.01) / (y+0.01)
return(mm)
} ))
print(dd2)
if(top_line==TRUE){
top_annotation = ComplexHeatmap::HeatmapAnnotation(
lines = EnrichedHeatmap::anno_enriched(gp = grid::gpar(fontsize=12),
ylim=c(ymin, ymax),
yaxis_side = "right",
yaxis_facing = "outside",
yaxis_gp = grid::gpar(fontsize = 10, lwd=1.5)))
}
else{
top_annotation = NULL
}
get_enrichment_heatmap_list <- function(x, names, titles, ...) {
ll <- length(x)
## first heatmap
ehml <- EnrichedHeatmap::EnrichedHeatmap(mat = x[[1]], name = names[[1]], column_title = titles[[1]], show_heatmap_legend = T,
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
use_raster = TRUE, ...)
## several other heatmaps if length of x > 1.
if (ll > 1) {
for (i in 2:ll) {
print(i)
ehml <- ehml +
EnrichedHeatmap::EnrichedHeatmap(
mat = x[[i]],
col=circlize::colorRamp2(quantile(x[[1]], c(0.1,0.5,0.6,0.9,0.99)),
col=c("#feebe2","#fcc5c0","#fa9fb5","#c51b8a","#7a0177")),
name = ifelse(length(names) >= i, names[i], "NA"),
use_raster = TRUE,
column_title = ifelse(length(titles) >= i, titles[i], "NA"),
show_heatmap_legend = ifelse(length(names) >= i, TRUE, FALSE), ...
) ## legend will be shown only if the name is given for a heatmap.
}
}
return(ehml)
}
ehm_list <- get_enrichment_heatmap_list(x = dd2$norm_mat,names = dd2$name,
titles = dd2$name,
cluster_rows = cluster_rows,
row_order=NULL,
show_row_names = FALSE,
axis_name_rot = 90,
heatmap_legend_param = list(color_bar = "continuous",legend_direction="horizontal", legend_width = grid::unit(3, "cm"),
title_position = "topcenter",labels_gp = grid::gpar(fontsize=10)),
axis_name = c("-1kb","TSS","TES", "+1kb"),
axis_name_gp = grid::gpar(fontsize=12),
top_annotation = top_annotation
)
# row_order_list = row_order(ehm_list)
# list_1$H3K4me3 <- list_1[row_order_list,]$X1
message("plotting...")
png(file=paste(output_name, lengths(gene_lists[1]),"normalized_hm.png", sep="_"),width=nrow(gene_lists)*2,height=5,pointsize = 10, res=300,units = "in")
ComplexHeatmap::draw(ehm_list, heatmap_legend_side = "top", gap = grid::unit(1.5, "mm"))
dev.off()
}
profiles_normalized_by_control(feature_txDb = feature_txDb,bw_test = "H3AC_veA_wt_spore", bw_control = "H3_an_spore",genelist_1 = genelist_1,genelist_2 = genelist_2, ymax = 3.8,ymin=0.5, output_name = "H3Ac_veA_wt_spore")
genelist_dat <- system.file("extdata/genesets/an_spore_pol2_for_percentilelineplot.txt" , package = "FungalSporeAnalysis")
genelist <- readr::read_delim(genelist_dat,delim="\t", col_names=FALSE)
lineplot_for_bw(feature_txDb, genelist =genelist,bw_file="RNA_bw", output_name = "An_d3_spore_mRNA_hisat2", tss = FALSE)
lineplot_for_bw(feature_txDb, genelist =genelist,bw_file="pol2_veA_wt_spore", output_name = "An_d3_spore_mRNA_hisat2", tss = FALSE)
library(FungalSporeAnalysis)
devtools::build()
devtools::build()
devtools::document()
devtools::document()
pkgdown::build_articles()
install.packages(c("circlize", "dplyr", "purrr", "stringr", "tidyr"))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
BiocManager::install("ComplexHeatmap")
BiocManager::install("EnrichedHeatmap")
BiocManager::install("IRanges")
BiocManager::install("GenomicRanges")
devtools::build()
install.packages("devtools")
install.packages("usethis")
devtools::build()
install.packages("knitr")
devtools::build()
BiocManager::install("GenomicFeatures")
BiocManager::install("GenomicFeatures")
devtools::build()
install.packages("broom")
devtools::build()
install.packages("pkgdown")
